//항목 1
Modern_C++_tip_1 : template에서의 타입 추론(포인터, 참조, 값)
Modern_C++_tip_2 : template에서의 타입 추론(배열에서 포인터로의 붕괴(decay)) + 활용
Modern_C++_tip_3 : template에서의 타입 추론(함수에서 포인터로의 붕괴(decay))

//항목 2
Modern_C++_tip_4 : auto 타입 추론은 template 타입 추론과 거의 같다(몇가지 예외만 빼고)

//항목 3
Modern_C++_tip_5 : decltype의 타입 추론 + 후행 반환 타입 예시 + 주의 사항
Modern_C++_tip_6 : decltype(auto) 사용법

//항목 4
Modern_C++_tip_7 : 컴파일러 에러를 유도해 타입 추론 결과 테스팅(정의하지 않은 템플릿 클래스 사용)
Modern_C++_tip_8 : typeid()보단 boost를 쓰자.(하지만 가장 좋은 방법은 타입 추론 매커니즘을 완벽히 이해하는 것이다.)

//항목 5
Modern_C++_tip_9 : 명시적 타입 선언보다 auto를 선호하도록 하자.

//항목 6
Modern_C++_tip_10 : 보이지 않는 프록시 클래스 타입에 의해 auto가 잘못된 추론을 할 수도 있다. 

//항목 7
Modern_C++_tip_11 : ()초기화와 {}초기화의 차이를 확실하게 알아두고 선택하자.

//항목 8
Modern_C++_tip_12 : 0과 NULL대신 nullptr을 사용하자(+정수 타입과 포인터 타입을 함께 오버로딩하는 것은 피하자)

//항목 9
Modern_C++_tip_13 : typedef보다 using을 쓰는 것이 무조건 좋다.

//항목 10
Modern_C++_tip_14 : enum(범위 없는 enum) 보다 enum class(범위 있는 enum)를 쓰자 + 튜플에서의 enum class

//항목 11
Modern_C++_tip_15 : C++98의 함수 사용 방지법(private영역에 선언 + 정의 X)보다 delete 함수를 무조건 사용하자

//항목 12*		  : 오버라이딩 오류는 컴파일러가 잡기 어렵기 때문에 override 키워드를 꼭 써주자.
Modern_C++_tip_16 : 멤버 함수에 참조 한정자를 붙혀 오버로딩을 할 수 있다.

//항목 13*		  : const_iterator를 되도록 사용하자, 하지만 일반적인 경우에 대해서는 begin, rbegin 같은 비멤버 함수를 사용하자.

//항목 14
Modern_C++_tip_17 : noexcept 키워드는 매우 중요하지만, 신중하게 사용해야 한다.

//항목 15
Modern_C++_tip_18 : constexpr는 쓸 수 있다면 반드시 사용하자.

//항목 16
Modern_C++_tip_19 : const 멤버 함수는 스레드에 안전하게 작성하자(특히 mutable 멤버 변수를 건드릴 경우)

//항목 17
Modern_C++_tip_20 : 특수 멤버 함수 6가지의 동작 및 Rule of Five

//항목 18
Modern_C++_tip_21 : 소유권 독점 자원관리에는 unique_ptr를 사용하자.

//항목 19
Modern_C++_tip_22 : shared_ptr의 구조 및 주의사항
Modern_C++_tip_23 : 소유권 공유 자원관리에는 shared_ptr를 사용하자.

//항목 20
Modern_C++_tip_24 : weak_ptr 사용법

//항목 21
Modern_C++_tip_25 : make 함수를 사용하자!(make_shared, make_unique, allocate_shared)